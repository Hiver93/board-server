package com.example.demo.controller;

import java.util.List;
import java.util.Set;

import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.BaseResponseBody;
import com.example.demo.dto.PostReqDto;
import com.example.demo.dto.PostResDto;
import com.example.demo.service.PostService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("posts")
@CrossOrigin(origins="*")
public class PostController {

	private PostService postService;

	public PostController(PostService postService) {
		super();
		this.postService = postService;
	}
	
	@PostMapping
	public void postPost(@RequestBody @Valid PostReqDto.Create dto) {
		this.postService.createPost(dto.toEntity());
	}
	
	@GetMapping
	public List<PostResDto> getPostList(Pageable pageable, @RequestParam(name="keyword") String keyword, @RequestParam(name="target") Set<String> targets){
		return this.postService.getPostList(pageable, keyword, targets).stream()
				.map(PostResDto::fromEntity)
				.toList();
	}
	
	@GetMapping("/{postId}")
	public ResponseEntity<BaseResponseBody> getPost(@PathVariable(name="postId") long postId) {
		PostResDto dto = PostResDto.fromEntity(this.postService.getPost(postId)); 
		return ResponseEntity.status(200)
				.body(BaseResponseBody.of(dto,"success"));
	}
	
	@DeleteMapping("/{postId}")
	public void deletePost(@PathVariable(name="postId") long postId, @RequestBody @Valid PostReqDto.Delete dto) {
		this.postService.deletePost(dto.toEntity(postId));
	}
	
	@PutMapping("{postId}")
	public void putPost(@PathVariable(name="postId") long postId, @RequestBody @Valid PostReqDto.Update dto) {
		this.postService.modifyPost(dto.toEntity(postId));
	}
	
	@GetMapping("/total-size")
	public long getTotalSize(@RequestParam(name="keyword") String keyword, @RequestParam(name="target") Set<String> targets) {
		return this.postService.getTotalSize(keyword, targets);
	}
}
