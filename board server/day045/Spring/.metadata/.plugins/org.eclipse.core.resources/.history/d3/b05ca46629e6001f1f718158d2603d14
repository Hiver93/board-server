package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.springframework.data.domain.Pageable;

import com.example.demo.domain.Post;

@Mapper
public interface PostMapper {

	@Select("SELECT * FROM post p "
			+ "LEFT JOIN users u ON u.id = p.user_id "
			+ "WHERE p.title LIKE CONCAT('%',#{keyword},'%') OR p.content LIKE CONCAT('%',#{keyword},'%') "
			+ "ORDER BY p.id DESC LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}")
	@Results({
		@Result(property = "user.id", column = "u.id"),
		@Result(property = "user.username", column = "username"),
		@Result(property = "user.nickname", column = "nickname")
	})
	public List<Post> findAllByTitleOrContent(@Param("pageable") Pageable pageable, @Param("keyword") String keyword);
	
	@Select("SELECT * FROM post p "
			+ "LEFT OUTER JOIN users u ON u.id = p.user_id "
			+ "WHERE p.title LIKE CONCAT('%',#{keyword},'%') "
			+ "ORDER BY p.id DESC LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}")
	@Results({
		@Result(property = "user.id", column = "u.id"),
		@Result(property = "user.username", column = "u.username"),
		@Result(property = "user.nickname", column = "u.nickname")
	})
	public List<Post> findAllByTitle(@Param("pageable") Pageable pageable, @Param("keyword") String keyword);
	
	@Select("SELECT * FROM post p "
			+ "LEFT OUTER JOIN users u ON u.id = p.user_id "
			+ "WHERE p.content LIKE CONCAT('%',#{keyword},'%') "
			+ "ORDER BY p.id DESC LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}")
	@Results({
		@Result(property = "user.id", column = "u.id"),
		@Result(property = "user.username", column = "u.username"),
		@Result(property = "user.nickname", column = "u.nickname")
	})
	public List<Post> findAllByContent(@Param("pageable") Pageable pageable, @Param("keyword") String keyword);
	
	@Select("SELECT * FROM post p "
			+ "LEFT OUTER JOIN users u ON u.id = p.user_id "
			+ "ORDER BY p.id DESC LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}")
	@Results({
		@Result(property = "user.id", column = "u.id"),
		@Result(property = "user.username", column = "u.username"),
		@Result(property = "user.nickname", column = "u.nickname")
	})
	public List<Post> findAll(@Param("pageable") Pageable pageable);
	
	
	@Select("SELECT COUNT(*) FROM post p "
			+ "WHERE p.title LIKE CONCAT('%',#{keyword},'%') OR p.content LIKE CONCAT('%',#{keyword},'%') ")
	public long countByTitleOrContent(@Param("keyword") String keyword);
	
	@Select("SELECT COUNT(*) FROM post p "
			+ "WHERE p.title LIKE CONCAT('%',#{keyword},'%') ")
	public long countByTitle(@Param("keyword") String keyword);
	
	@Select("SELECT COUNT(*) FROM post p "
			+ "WHERE p.content LIKE CONCAT('%',#{keyword},'%') ")
	public long countByContent(@Param("keyword") String keyword);
	
	@Select("SELECT COUNT(*) FROM post p ")
	public long count();
	
	@Insert("INSERT INTO post(title, content, view, user_id, created_at, updated_at) "
			+ "VALUES(#{post.title}, #{post.content}, #{post.view}, #{post.user.id}, NOW(), NOW())")
	public void save(@Param("post") Post post);
	
	@Update("UPDATE post "
			+ "SET title = #{post.title}, content=#{post.content}, view=#{post.view}, updated_at = NOW() "
			+ "WHERE id = #{post.id}")
	public void update(@Param("post") Post post);
	
	@Delete("DELETE FROM post "
			+ "WHERE id = #{post.id}")
	public void delete(@Param("post") Post post);
	
	@Select("SELECT * FROM post p "
			+ "LEFT OUTER JOIN users u ON u.id = p.user_id "
			+ "WHERE p.id = #{id}")
	@Results({
		@Result(property = "user.id", column = "u.id"),
		@Result(property = "user.username", column = "u.username"),
		@Result(property = "user.nickname", column = "u.nickname")
	})
	public Optional<Post> findById(Integer id);
}
