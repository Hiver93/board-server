package com.example.demo.controller;

import java.util.Set;

import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.common.BaseResBody;
import com.example.demo.domain.Post;
import com.example.demo.dto.CommentReqDto;
import com.example.demo.dto.PostReqDto;
import com.example.demo.dto.PostResDto;
import com.example.demo.service.AuthService;
import com.example.demo.service.CommentService;
import com.example.demo.service.PostService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/posts")
public class PostController {

	private PostService postService;
	private CommentService commentService;
	private AuthService authService;
	public PostController(PostService postService, CommentService commentService, AuthService authService) {
		super();
		this.postService = postService;
		this.commentService = commentService;
		this.authService = authService;
	}
	
	@PostMapping
	public ResponseEntity<BaseResBody> postPost(@RequestBody @Valid PostReqDto.Create dto){
		this.postService.createPost(dto.to(authService.authenticate()));
		return BaseResBody.of(HttpStatus.CREATED, "posted");
	}
	
	@GetMapping
	public ResponseEntity<BaseResBody> getPostList(Pageable pageable, @RequestParam(name="keyword") String keyword, @RequestParam(name="target") Set<String> targets){
		var result = PostResDto.PostList.from(
				this.postService.getTotalSize(keyword, targets), 
				this.postService.getPostList(pageable, keyword, targets));
		
		return BaseResBody.of(HttpStatus.OK, result, "post list");		
	}
	
	@GetMapping("/{postId}")
	public ResponseEntity<BaseResBody> getPost(@PathVariable(name = "postId") Integer postId){
		var result = PostResDto.Detail.from(this.postService.readPost(postId));		
		return BaseResBody.of(HttpStatus.OK, result, "get post");		
	}
	
	@DeleteMapping("/{postId}")
	public ResponseEntity<BaseResBody> deltePost(@PathVariable(name = "postId") Integer postId){
		this.postService.removePost(postId, this.authService.authenticate());		
		return BaseResBody.of(HttpStatus.ACCEPTED, "deleted");		
	}
	
	@PutMapping("/{postId}")
	public ResponseEntity<BaseResBody> putPost(@PathVariable(name = "postId") Integer postId, @RequestBody @Valid PostReqDto.Update dto){
		this.postService.modifyPost(dto.to(this.authService.authenticate(), postId));
		return BaseResBody.of(HttpStatus.ACCEPTED, "updated");		
	}
	
	@PostMapping("/{postId}/comments")
	public ResponseEntity<BaseResBody> postComment(@PathVariable(name = "postId") Integer postId, @RequestBody @Valid CommentReqDto.Create dto){
		this.commentService.createComment(dto.to(this.authService.authenticate(), Post.builder().id(postId).build()));
		return BaseResBody.of(HttpStatus.CREATED, "comment posted");		
	}
	
	@DeleteMapping("/{postId}/comments/{commentId}")
	public ResponseEntity<BaseResBody> deleteComment(@PathVariable(name = "postId") Integer postId, @PathVariable(name = "commentId") Integer commentId){
		
		return BaseResBody.of(HttpStatus.CREATED, "post : " + postId + " comment : " + commentId);		
	}
}
