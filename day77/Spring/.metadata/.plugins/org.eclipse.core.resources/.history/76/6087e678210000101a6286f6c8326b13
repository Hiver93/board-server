package com.example.demo.facade;

import java.io.IOException;
import java.util.Set;

import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.domain.Comment;
import com.example.demo.domain.Image;
import com.example.demo.domain.Post;
import com.example.demo.domain.PostLike;
import com.example.demo.dto.CommentReqDto;
import com.example.demo.dto.PostReqDto;
import com.example.demo.dto.PostResDto.PostList;
import com.example.demo.service.AuthService;
import com.example.demo.service.CommentService;
import com.example.demo.service.ImageService;
import com.example.demo.service.PostLikeService;
import com.example.demo.service.PostService;

@Service
public class PostFacade {

	private PostService postService;
	private CommentService commentService;
	private PostLikeService postLikeService;
	private ImageService imageService;
	private AuthService authService;
	public PostFacade(PostService postService, CommentService commentService, PostLikeService postLikeService,
			ImageService imageService, AuthService authService) {
		super();
		this.postService = postService;
		this.commentService = commentService;
		this.postLikeService = postLikeService;
		this.imageService = imageService;
		this.authService = authService;
	}
	
	@Transactional
	public void createPost(PostReqDto.Create dto, MultipartFile image) throws IOException {
		Post post;
		if(this.authService.isAuthenticated()) {
			post = this.postService.createPost(dto.getTitle(), dto.getContent(), this.authService.authenticate());
		}
		else {
			post = this.postService.createPost(dto.getTitle(), dto.getContent(), dto.getPassword());			
		}
		
		if(image != null) {
			Image savedImage = this.imageService.saveImage(image, post);
			post.addImage(savedImage);
		}
	}
	
	public PostList getPostList(Pageable pageable, String keyword, Set<String> target) {
		return PostList.from(this.postService.getTotalSize(keyword, target), this.postService.getPostList(pageable, keyword, target));
	}
	
	public Post readPost(Integer postId) {
		Post saved = this.postService.getPost(postId);
		this.postService.increaseView(postId);
		return saved;
	}
	
	@Transactional
	public void removePost(Integer postId, PostReqDto.Delete dto) {
		Post saved = this.postService.getPost(postId);
		if(saved.isAnonymousPost()) {
			this.postService.removePost(postId, dto.getPassword());
		}
		else {
			this.postService.removePost(postId, this.authService.authenticate());
		}
	}
	
	@Transactional
	public void modifyPost(Integer postId, PostReqDto.Put dto) {
		Post saved = this.postService.getPost(postId);
		if(saved.isAnonymousPost()) {
			this.postService.modifyPost(postId, dto.getTitle(), dto.getContent(), dto.getPassword());
		}
		else {
			this.postService.modifyPost(postId, dto.getTitle(), dto.getContent(), this.authService.authenticate());
		}
	}
	
	@Transactional
	public void addComment(Integer postId, CommentReqDto.Create dto) {
		Post post = this.postService.getPost(postId);
		Comment savedComment = this.commentService.createComment(dto.getContent(), saved, this.authService.authenticate());
		post.addComment(savedComment);
	}
	
	public void removeComment(Integer commentId) {
		this.commentService.removeComment(commentId, this.authService.authenticate());
	}
	
	@Transactional
	public void addPostLike(Integer postId) {
		Post post = this.postService.getPost(postId);
		PostLike savedLike = this.postLikeService.createPostLike(post, this.authService.authenticate());
		post.addPostLike(savedLike);
	}
	
	public void removeLike(Integer postId) {
		Post post = this.postService.getPost(postId);
		this.postLikeService.removePostLike(post, null);
	}
}

