package facade;

import java.util.Set;

import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.domain.Post;
import com.example.demo.domain.User;
import com.example.demo.dto.CommentReqDto;
import com.example.demo.dto.PostReqDto;
import com.example.demo.dto.PostResDto.Detail;
import com.example.demo.dto.PostResDto.PostList;
import com.example.demo.service.AuthService;
import com.example.demo.service.PostService;

@Component
public class PostFacade {

	private PostService postService;
	private AuthService authService;
	public PostFacade(PostService postService, AuthService authService) {
		super();
		this.postService = postService;
		this.authService = authService;
	}
	
	public void createPost(PostReqDto.Create dto) {
		User user = this.authService.getAuthentiction();
		if(user == null) {
			this.postService.createPost(dto.getTitle(), dto.getContent(), dto.getPassword());
		}
		else {
			this.postService.createPost(dto.getTitle(), dto.getContent(), user);
		}
	}
	
	public PostList getPostList(Pageable pageable, String keyword, Set<String> target) {
		return PostList.from(this.postService.getTotalSize(keyword, target), this.postService.getPostList(pageable, keyword, target));
	}
	
	public Detail readPost(Integer postId) {
		Detail detail = Detail.from(this.postService.getPost(postId));
		this.postService.increaseView(postId);
		return detail;
	}
	
	@Transactional
	public void removePost(Integer postId, PostReqDto.Delete dto) {
		Post saved = this.postService.getPost(postId);
		if(saved.isAnonymousPost()) {
			this.postService.removePost(postId, dto.getPassword());
		}
		else {
			this.authService.authenticate();
			this.postService.removePost(postId, this.authService.getAuthentiction());
		}
	}
	
	@Transactional
	public void modifyPost(Integer postId, PostReqDto.Put dto) {
		Post saved = this.postService.getPost(postId);
		if(saved.isAnonymousPost()) {
			this.postService.modifyPost(postId, dto.getTitle(), dto.getContent(), dto.getPassword());
		}
		else {
			this.authService.authenticate();
			this.postService.modifyPost(postId, dto.getTitle(), dto.getContent(), this.authService.getAuthentiction());
		}
	}
	
	public void addComment(Integer postId, CommentReqDto.Create dto) {
		this.authService.authenticate();
		this.postService.addComment(postId, dto.toString(), this.authService.getAuthentiction());
	}
	
	public void addLike(Integer postId) {
		this.authService.authenticate();
		this.postService.addPostLike(postId, this.authService.getAuthentiction());
	}
}
