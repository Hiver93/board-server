package com.example.demo.service;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.domain.User;
import com.example.demo.error.BoardException;
import com.example.demo.error.ErrorCode;
import com.example.demo.repository.UserRepository;

@Service
public class UserService {

	private UserRepository userRepository;
	private PasswordEncoder passwordEncoder;
	public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
		super();
		this.userRepository = userRepository;
		this.passwordEncoder = passwordEncoder;
	}
	
	public User createUser(String username, String password, String nickname) {
		this.userRepository.findByUsername(username).ifPresent(u->{throw new BoardException(ErrorCode.USERNAME_CONFLICT);});
		return this.userRepository.save(User.builder()
				.username(username)
				.password(passwordEncoder.encode(password))
				.nickname(nickname)
				.build());
	}
	
	public User getUser(String username, String password) {
		User saved = this.userRepository.findByUsername(username).orElseThrow(()->{throw new BoardException(ErrorCode.INVALID_CREDENTIALS);});
		if(!passwordEncoder.matches(password, saved.getPassword())) {
			throw new BoardException(ErrorCode.INVALID_CREDENTIALS);
		}
	}
}
