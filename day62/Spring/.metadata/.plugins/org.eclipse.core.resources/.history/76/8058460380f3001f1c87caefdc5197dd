package com.example.demo.domain;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
@EntityListeners(value = AuditingEntityListener.class)
public class Post {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	private String title;
	private String content;
	private Integer view;
	private User user;
	private List<Comment> commentList;
	private List<PostLike> postLikeList;
	private Integer comments;
	private Integer postLikes;
	private LocalDateTime createdAt;
	private LocalDateTime updatedAt;
	public Post(Integer id, String title, String content, Integer view, User user) {
		super();
		this.id = id;
		this.title = title;
		this.content = content;
		this.view = view;
		this.user = user;
	}
	public Post() {
		super();
	}
	public Integer getId() {
		return id;
	}
	public String getTitle() {
		return title;
	}
	public String getContent() {
		return content;
	}
	public Integer getView() {
		return view;
	}
	public User getUser() {
		return user;
	}
	public List<Comment> getCommentList() {
		return commentList;
	}
	public List<PostLike> getPostLikeList() {
		return postLikeList;
	}
	public Integer getComments() {
		return comments;
	}
	public Integer getPostLikes() {
		return postLikes;
	}
	public LocalDateTime getCreatedAt() {
		return createdAt;
	}
	public LocalDateTime getUpdatedAt() {
		return updatedAt;
	}
	public static Builder builder() {
		return new Builder();
	}
	public static class Builder{
		private Integer id;
		private String title;
		private String content;
		private Integer view = 0;
		private User user;
		public Builder id(Integer id) {
			this.id = id;
			return this;
		}
		public Builder title(String title) {
			this.title = title;
			return this;
		}
		public Builder content(String content) {
			this.content = content;
			return this;
		}
		public Builder user(User user) {
			this.user = user;
			return this;
		}
		public Post build() {
			return new Post(id, title, content, view, user);
		}
	}
}
